---
- name: Manage and Backup Network ID Secret Key with genpeerid
  hosts: polkadot, cumulus, encointer, hydradx
  gather_facts: true
  become: true
  vars:
    install_dir: "/usr/local/bin"
    local_backup_dir: "/opt/backup"
    client_folder: "/opt" # ~/.local/share default for polkadot-sdk
    binary_name: "genpeerid"
    script_url: "https://raw.githubusercontent.com/rotkonetworks/genpeerid/master/scripts/install.sh"

  tasks:
    - name: Check if genpeerid is already installed
      ansible.builtin.stat:
        path: "{{ install_dir }}/{{ binary_name }}"
      register: binary_stat

    - name: Ensure genpeerid is installed
      block:
        - name: Create temporary directory for installation script
          ansible.builtin.tempfile:
            state: directory
            prefix: "install_"
          register: temp_dir

        - name: Download genpeerid installation script
          ansible.builtin.get_url:
            url: "{{ script_url }}"
            dest: "{{ temp_dir.path }}/{{ binary_name }}.sh"
            mode: '0755'

        - name: Execute the installation script
          ansible.builtin.command:
            cmd: "{{ temp_dir.path }}/{{ binary_name }}.sh"
            chdir: "{{ temp_dir.path }}"
          #  ignore_errors: true
          register: script_output

        - name: Check installation success
          ansible.builtin.stat:
            path: "{{ install_dir }}/{{ binary_name }}"
          register: post_install_check
          failed_when: not post_install_check.stat.exists

        - name: Clean up installation files
          ansible.builtin.file:
            path: "{{ temp_dir.path }}"
            state: absent
      when: not binary_stat.stat.exists

    - name: Ensure backup directory exists locally
      ansible.builtin.file:
        path: "{{ local_backup_dir }}"
        state: directory
        mode: '0755'
      delegate_to: localhost

    - name: Locate secret_ed25519 files
      ansible.builtin.find:
        paths: "{{ client_folder }}"
        patterns: "secret_ed25519"
        recurse: true
        excludes: "lost+found/*"
      register: secret_files

    - name: Process and backup each secret file
      block:
        - name: Generate peer ID for the secret key
          ansible.builtin.command:
            cmd: "{{ install_dir }}/{{ binary_name }} {{ item.path }}"
          register: peerid
          loop: "{{ secret_files.files }}"
          when: secret_files.matched > 0
          loop_control:
            label: "{{ item.path }}"
            pause: false

        - name: Fetch secret file to local machine
          when: peerid.results | map(attribute='stdout') | list | length > 0
          ansible.builtin.fetch:
            src: "{{ item.item.path }}"
            dest: "{{ local_backup_dir }}/{{ ansible_hostname }}_{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}_{{ peerid.results | map(attribute='stdout') | join('_') }}.secret_ed25519"
            flat: yes
          loop: "{{ peerid.results }}"
          loop_control:
            label: "{{ item.item.path }}"
            pause: false
