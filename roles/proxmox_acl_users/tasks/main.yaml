---
- name: Check if node is part of a cluster
  ansible.builtin.stat:
    path: /etc/pve/corosync.conf
  register: cluster_config

- name: Set primary node and is_cluster fact
  ansible.builtin.set_fact:
    primary_node: "{{ cluster_config.stat.exists | ternary(groups['proxmox_hosts'][0], inventory_hostname) }}"
    is_cluster: "{{ cluster_config.stat.exists }}"

- name: Acquire current users on primary node
  delegate_to: "{{ primary_node }}"
  block:
    - name: Get current users
      ansible.builtin.shell:
        cmd: "set -o pipefail && pveum user list | awk '{print $2}' | grep -wo '[a-zA-Z0-9_-]*@pve' || true"
      register: pveum_user_list
      changed_when: False
      failed_when: False
      args:
        executable: /bin/bash

    - name: Set current users fact if users exist
      ansible.builtin.set_fact:
        current_users: "{{ pveum_user_list.stdout_lines }}"
      when: pveum_user_list.stdout

    - name: Set current users fact empty if no users exist
      ansible.builtin.set_fact:
        current_users: []
      when: not pveum_user_list.stdout

- name: Check if user needs to be added or modified
  delegate_to: "{{ primary_node }}"
  ansible.builtin.set_fact:
    user_action: "{{ item.name in current_users | ternary('modify', 'add') }}"
  with_items: "{{ proxmox_admin_accounts }}"

- name: Create proxmox admin account for ansible on primary node
  delegate_to: "{{ primary_node }}"
  ansible.builtin.command:
    argv:
      - pveum
      - user
      - add
      - "{{ item.name }}"
      - -comment
      - '"{{ item.comment }}"'
      - -group
      - "{{ item.groups }}"
  when: item.name not in current_users and item.name and (inventory_hostname == primary_node)
  with_items: "{{ proxmox_admin_accounts }}"
