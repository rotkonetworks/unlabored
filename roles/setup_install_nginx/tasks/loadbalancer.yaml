---
- name: Group nodes by default_public_dns_lb
  set_fact:
    lb_groups: "{{ groups['all'] | lb_grouping(hostvars) }}"
  run_once: true

- name: Determine primary node for LB group
  set_fact:
    primary_node: "{{ lb_groups[default_public_dns_lb] | sort | first }}"
  run_once: true

- name: Obtain certificate for loadbalancer using DNS-01 challenge (Only on the primary node)
  ansible.builtin.command:
    cmd: >
      certbot certonly --non-interactive --agree-tos --email "{{ default_certificate_email }}"
      --preferred-challenges dns --authenticator dns-porkbun
      --dns-porkbun-key "{{ porkbun_api_key }}"
      --dns-porkbun-secret "{{ porkbun_secret_key }}"
      --dns-porkbun-propagation-seconds 60
      -d "{{ default_public_dns_lb }}"
  register: certbot_lb_result
  changed_when: "'Congratulations' in certbot_lb_result.stdout"
  when: 
    - default_node_type == 'endpoint'
    - inventory_hostname == primary_node

- name: Synchronize certificates to other nodes in the LB group (Only on the primary node)
  ansible.builtin.synchronize:
    src: /etc/letsencrypt/live/{{ default_public_dns_lb }}/
    dest: /etc/letsencrypt/live/{{ default_public_dns_lb }}/
    delegate_to: "{{ item }}"
  loop: "{{ lb_groups[default_public_dns_lb] | list }}"
  when: 
    - default_node_type == 'endpoint'
    - inventory_hostname == primary_node
    - item != primary_node

- name: Ensure NGINX configuration directories exist
  ansible.builtin.file:
    path: "/etc/nginx/{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - streams-available
    - streams-enabled

- name: Apply HTTPS configuration to NGINX
  ansible.builtin.template:
    src: https-{{ default_node_type }}-lb.j2
    dest: "/etc/nginx/streams-available/{{ default_public_dns_lb }}"
    mode: '0755'

- name: Enable HTTPS configuration for NGINX
  ansible.builtin.file:
    src: "/etc/nginx/streams-available/{{ default_public_dns_lb }}"
    dest: "/etc/nginx/streams-enabled/{{ default_public_dns_lb }}"
    state: link
  notify: Reload nginx
...
