---
- name: Install necessary packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
    - nginx
    - python3-certbot-nginx
    - certbot
    - python3-pip
  register: packages_installed

- name: Check certbot plugins
  ansible.builtin.shell:
    cmd: certbot plugins || true
  register: certbot_plugins_output

- name: Install certbot_dns_porkbun plugin if absent
  ansible.builtin.pip:
    name: certbot_dns_porkbun
    state: present
    extra_args: --break-system-packages
  when: "'dns-porkbun' not in certbot_plugins_output.stdout"

- name: Obtain certificate using DNS-01 challenge
  ansible.builtin.command:
    cmd: >
      certbot certonly --non-interactive --agree-tos --email "{{ default_certificate_email }}"
      --preferred-challenges dns --authenticator dns-porkbun
      --dns-porkbun-key "{{ porkbun_api_key }}"
      --dns-porkbun-secret "{{ porkbun_secret_key }}"
      --dns-porkbun-propagation-seconds 60
      -d "{{ default_public_dns }}"
  register: certbot_result
  changed_when: "'Congratulations' in certbot_result.stdout"
  no_log: True

- name: Reload nginx service
  ansible.builtin.service:
    name: nginx
    state: reloaded

- name: Set up Certbot DNS auto-renewal cron job
  ansible.builtin.cron:
    name: "Certbot DNS Renewal and Reload Nginx"
    job: "certbot renew --quiet && systemctl reload nginx"
    special_time: daily
    user: root

- name: Ensure NGINX configuration directories exist
  ansible.builtin.file:
    path: "/etc/nginx/{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - sites-available
    - sites-enabled

- name: Check if PSK already exists
  ansible.builtin.stat:
    path: "/etc/nginx/psk.txt"
  register: psk_stat
  no_log: True

- name: Generate Pre-Shared Key (PSK) if not existing
  ansible.builtin.command:
    cmd: openssl rand -base64 32
  register: psk_output
  changed_when: False
  when: not psk_stat.stat.exists
  no_log: True

- name: Store PSK in a fact if newly generated
  ansible.builtin.set_fact:
    default_nginx_psk: "{{ psk_output.stdout }}"
  when: not psk_stat.stat.exists
  no_log: True

# TODO: use vault instead of txt files
- name: Store PSK in a secure file if newly generated
  ansible.builtin.copy:
    content: "{{ default_nginx_psk }}"
    dest: "/etc/nginx/psk.txt"
    mode: '0600'
  no_log: True
  when: not psk_stat.stat.exists

- name: Get PSK from file
  ansible.builtin.slurp:
    src: "/etc/nginx/psk.txt"
  register: psk_slurp
  no_log: True
  when: psk_stat.stat.exists

- name: Store existing PSK in a fact
  ansible.builtin.set_fact:
    default_nginx_psk: "{{ psk_slurp.content | b64decode }}"
  when: psk_stat.stat.exists
  no_log: True

- name: Apply HTTPS configuration to NGINX
  ansible.builtin.template:
    src: https-{{ default_node_type }}.j2
    dest: "/etc/nginx/sites-available/{{ default_public_dns }}"
    mode: '0755'

- name: Enable HTTPS configuration for NGINX
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ default_public_dns }}"
    dest: "/etc/nginx/sites-enabled/{{ default_public_dns }}"
    state: link
  notify: Reload nginx

# - name: Include loadbalancer tasks for endpoints
#   ansible.builtin.import_tasks: loadbalancer.yaml
#   when: default_node_type == 'endpoint'
...
