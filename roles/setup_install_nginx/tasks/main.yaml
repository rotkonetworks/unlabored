---
- name: Ensure required packages are installed
  ansible.builtin.apt:
    name:
      - nginx
      - certbot
      - python3-certbot-nginx
    state: present
    update_cache: yes
  become: true

- name: Check if python3-certbot-dns-cloudflare is available
  ansible.builtin.command: apt-cache show python3-certbot-dns-cloudflare
  register: cloudflare_plugin_available
  changed_when: false
  failed_when: false
  become: true

- name: Install Cloudflare DNS plugin for Certbot using apt
  ansible.builtin.apt:
    name: python3-certbot-dns-cloudflare
    state: present
  when: cloudflare_plugin_available.rc == 0
  become: true

- name: Install Cloudflare DNS plugin for Certbot using pip (fallback)
  ansible.builtin.pip:
    name: certbot-dns-cloudflare
    extra_args: --break-system-packages
  when: cloudflare_plugin_available.rc != 0
  become: true

- name: Ensure Cloudflare credentials directory exists
  ansible.builtin.file:
    path: /root/.secrets
    state: directory
    mode: '0700'
    owner: root
    group: root
  become: true

- name: Create Cloudflare credentials file
  ansible.builtin.copy:
    content: |
      dns_cloudflare_api_token = {{ cloudflare_api_token }}
      dns_cloudflare_zone_id = {{ cloudflare_zone_id }}
    dest: /root/.secrets/cloudflare.ini
    mode: '0600'
    owner: root
    group: root
  become: true
  #  no_log: true

- name: Check if certificates already exist
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ item }}/fullchain.pem"
  register: cert_files
  loop:
    - "{{ default_domain }}"
    - "{{ default_bootnode_domain | default(omit) }}"
  when: default_bootnode_domain is defined

- name: Obtain certificates using DNS-01 challenge
  ansible.builtin.command:
    cmd: >
      certbot certonly
      --non-interactive
      --agree-tos
      --email "{{ default_certificate_email }}"
      --preferred-challenges dns
      --authenticator dns-cloudflare
      --dns-cloudflare-credentials /root/.secrets/cloudflare.ini
      --dns-cloudflare-propagation-seconds 60
      -d "{{ item.item }}"
  when: 
    - not item.stat.exists
    - item.item is defined
  loop: "{{ cert_files.results }}"
  register: certbot_results
  changed_when: "'Congratulations' in item.stdout"
  become: true
  #  no_log: true

- name: Set up Certbot auto-renewal cron job
  ansible.builtin.cron:
    name: "Certbot Renewal"
    job: "certbot renew --quiet --post-hook 'systemctl reload nginx'"
    special_time: daily
    user: root
  become: true

- name: Apply HTTPS configuration to NGINX for endpoint
  ansible.builtin.template:
    src: "https-{{ default_node_type }}.conf.j2"
    dest: "/etc/nginx/sites-available/{{ default_domain }}"
    mode: '0644'
  notify: Reload nginx
  become: true

- name: Apply HTTPS configuration to NGINX for bootnode
  ansible.builtin.template:
    src: "https-bootnode.conf.j2"
    dest: "/etc/nginx/sites-available/{{ default_bootnode_domain }}"
    mode: '0644'
  notify: Reload nginx
  become: true
  when: default_bootnode_domain is defined

- name: Enable NGINX configuration for endpoint
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ default_domain }}"
    dest: "/etc/nginx/sites-enabled/{{ default_domain }}"
    state: link
  notify: Reload nginx
  become: true

- name: Enable NGINX configuration for bootnode
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ default_bootnode_domain }}"
    dest: "/etc/nginx/sites-enabled/{{ default_bootnode_domain }}"
    state: link
  notify: Reload nginx
  become: true
  when: default_bootnode_domain is defined

- name: Ensure NGINX is started and enabled
  ansible.builtin.service:
    name: nginx
    state: started
    enabled: yes
  become: true
