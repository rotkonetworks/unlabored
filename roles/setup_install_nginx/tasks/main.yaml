---
- name: Install necessary packages
  ansible.builtin.package:
    name: "{{ packages }}"
    state: present
  register: packages_installed

- name: Check certbot plugins
  ansible.builtin.command:
    cmd: certbot plugins
  register: certbot_plugins_output
  changed_when: false
  check_mode: false

- name: Install Cloudflare DNS plugin for Certbot
  ansible.builtin.pip:
    name: "{{ certbot_cloudflare_plugin }}"
    state: present
  when: "'dns-cloudflare' not in certbot_plugins_output.stdout"

- name: Ensure Cloudflare credentials directory exists
  ansible.builtin.file:
    path: "{{ cloudflare_creds_path | dirname }}"
    state: directory
    mode: '0700'
    owner: root
    group: root

- name: Create Cloudflare credentials file
  ansible.builtin.copy:
    content: |
      dns_cloudflare_email = {{ cloudflare_email }}
      dns_cloudflare_api_key = {{ cloudflare_api_key }}
    dest: "{{ cloudflare_creds_path }}"
    mode: '0600'
    owner: root
    group: root
  no_log: true

- name: Obtain certificate using DNS-01 challenge
  ansible.builtin.command:
    cmd: >
      certbot certonly
      --non-interactive
      --agree-tos
      --email "{{ default_certificate_email }}"
      --preferred-challenges dns
      --authenticator dns-cloudflare
      --dns-cloudflare-credentials {{ cloudflare_creds_path }}
      --dns-cloudflare-propagation-seconds 60
      -d "{{ default_public_dns }}"
  register: certbot_result
  changed_when: "'Congratulations' in certbot_result.stdout"
  no_log: true

- name: Set up Certbot DNS auto-renewal cron job
  ansible.builtin.cron:
    name: "Certbot DNS Renewal and Reload Nginx"
    job: "certbot renew --quiet && systemctl reload nginx"
    special_time: daily
    user: root

- name: Ensure NGINX configuration directories exist
  ansible.builtin.file:
    path: "/etc/nginx/{{ item }}"
    state: directory
    mode: '0755'
  loop: "{{ nginx_config_dirs }}"

- name: Generate Pre-Shared Key (PSK) if not existing
  ansible.builtin.shell:
    cmd: |
      if [ ! -f {{ psk_file_path }} ]; then
        openssl rand -base64 32 > {{ psk_file_path }}
        chmod 600 {{ psk_file_path }}
      fi
      cat {{ psk_file_path }}
  register: psk_output
  changed_when: false
  no_log: true

- name: Store PSK in a fact
  ansible.builtin.set_fact:
    default_nginx_psk: "{{ psk_output.stdout }}"
  no_log: true

- name: Apply HTTPS configuration to NGINX
  ansible.builtin.template:
    src: "https-{{ default_node_type }}.j2"
    dest: "{{ nginx_site_config }}"
    mode: '0644'
  notify: Reload nginx

- name: Enable HTTPS configuration for NGINX
  ansible.builtin.file:
    src: "{{ nginx_site_config }}"
    dest: "/etc/nginx/sites-enabled/{{ default_public_dns }}"
    state: link
  notify: Reload nginx
