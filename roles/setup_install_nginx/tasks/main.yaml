---
- name: Ensure required packages are installed
  ansible.builtin.apt:
    name:
      - certbot
      - python3-certbot-dns-cloudflare
    state: present
    update_cache: yes
  become: True
  become_user: root

- name: Ensure Certbot secrets directory exists
  ansible.builtin.file:
    path: /root/.secrets/certbot
    state: directory
    mode: "0700"
    owner: root
    group: root
  become: True
  become_user: root

- name: Ensure Cloudflare credentials file exists
  ansible.builtin.copy:
    content: |
      dns_cloudflare_api_token = {{ cloudflare_api_token }}
    dest: /root/.secrets/certbot/cloudflare.ini
    mode: "0600"
    owner: root
    group: root
  become: True
  become_user: root

- name: Calculate days until expiration
  ansible.builtin.set_fact:
    days_until_expiration: >
      {{ ((cert_info.not_after | default('1970-01-01T00:00:00Z') | to_datetime('%Y%m%d%H%M%SZ')) - (ansible_date_time.iso8601 | to_datetime('%Y-%m-%dT%H:%M:%SZ'))).days }}
  when: cert_info is defined and cert_info.not_after is defined

  #NOTE: please take a look at it -al
- name: Ensure NGINX SSL directory exists
  ansible.builtin.file:
    path: /etc/nginx/ssl
    state: directory
    mode: "0755"
    owner: root
    group: root
  become: True
  become_user: root

# NOTE: Create cloudflare_origin.pem and cloudflare_origin.key from variables
# These files are required for Let's Encrypt renewal to work properly
- name: Create cloudflare_origin.pem
  ansible.builtin.copy:
    content: "{{ cloudflare_origin_certificate }}"
    dest: /etc/nginx/ssl/cloudflare_origin.pem
    mode: "0644"
    owner: root
    group: root
  become: True
  become_user: root

- name: Create cloudflare_origin.key
  ansible.builtin.copy:
    content: "{{ cloudflare_origin_key }}"
    dest: /etc/nginx/ssl/cloudflare_origin.key
    mode: "0600"
    owner: root
    group: root
  become: True
  become_user: root

  #NOTE: added --dns-cloudflare-propagation-seconds 60 and --expand flag for multiple domains -al
- name: Renew Let's Encrypt certificate using DNS challenge
  ansible.builtin.command: >
    certbot certonly --dns-cloudflare
    --dns-cloudflare-credentials /root/.secrets/certbot/cloudflare.ini
    -d {{ default_domain }}
    {% if default_bootnode_domain is defined and default_bootnode_domain | length > 0 %}
    -d {{ default_bootnode_domain }}
    {% endif %}
    {% if transition_bootnode_domain is defined and transition_bootnode_domain | length > 0 %}
    -d {{ transition_bootnode_domain }}
    {% endif %}
    --non-interactive
    --agree-tos
    --email {{ default_certificate_email }}
    --deploy-hook "systemctl reload nginx"
    --dns-cloudflare-propagation-seconds 60
  become: True
  become_user: root
  when: days_until_expiration is not defined or days_until_expiration | int < 30

- name: Symlink Let's Encrypt certificates to NGINX SSL directory
  ansible.builtin.file:
    src: "/etc/letsencrypt/live/{{ default_domain }}/{{ item }}"
    dest: "/etc/nginx/ssl/{{ item }}"
    state: link
    force: yes
  loop:
    - fullchain.pem
    - privkey.pem
  become: True
  become_user: root
  notify: Reload nginx

- name: Configure NGINX for HTTPS
  ansible.builtin.template:
    src: "https-{{ default_node_type }}.conf.j2"
    dest: "/etc/nginx/sites-available/{{ default_domain }}"
    mode: "0644"
  notify: Reload nginx
  become: True
  become_user: root

- name: Enable NGINX configuration
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ default_domain }}"
    dest: "/etc/nginx/sites-enabled/{{ default_domain }}"
    state: link
  notify: Reload nginx
  become: True
  become_user: root

- name: Set up Certbot auto-renewal
  ansible.builtin.cron:
    name: "Certbot renewal"
    job: "certbot renew --quiet --dns-cloudflare --dns-cloudflare-credentials /root/.secrets/certbot/cloudflare.ini --expand --deploy-hook 'systemctl reload nginx'"
    minute: "0"
    hour: "3"
    weekday: "1"
  become: True
  become_user: root

- name: Check NGINX configuration
  ansible.builtin.command: nginx -t
  register: nginx_config_check
  changed_when: False
  failed_when: nginx_config_check.rc != 0
  become: True
  become_user: root
