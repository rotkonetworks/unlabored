#!/usr/sbin/nft -f
# nftables configuration for {{ site_name | upper }}
# Generated: {{ ansible_date_time.iso8601_basic_short }}

flush ruleset

# Variables from configuration
define PUBLIC_IP4 = {{ public_ipv4 }}
define PUBLIC_IP6 = {{ public_ipv6 }}
define INTERNAL4 = {{ internal_v4 }}
define INTERNAL6 = {{ internal_v6 }}
define MGMT_NET = {{ management_net }}

# Interface definitions
define WAN = {{ wan_interface }}
define INTERNAL = {{ internal_interface }}
define MGMT = {{ mgmt_interface }}
define STORAGE = {{ storage_interface }}

{% if bgp_peers_v4 | length > 0 %}
define BGP_PEERS_V4 = { {{ bgp_peers_v4 | join(', ') }} }
{% endif %}
{% if bgp_peers_v6 | length > 0 %}
define BGP_PEERS_V6 = { {{ bgp_peers_v6 | join(', ') }} }
{% endif %}

# Main filter table - IPv6 and IPv4 combined
table inet filter {
    set allowed_ssh {
        type ipv4_addr
        flags interval
        elements = { {{ ssh_allowed_v4 | join(', ') }} }
    }

    set allowed_ssh_v6 {
        type ipv6_addr
        flags interval
        elements = { {{ ssh_allowed_v6 | join(', ') }} }
    }

    chain input {
        type filter hook input priority filter; policy drop;

        # Connection tracking
        ct state established,related accept
        ct state invalid drop

        # Loopback
        iif "lo" accept

        # ICMPv6 (required for IPv6)
        ip6 nexthdr icmpv6 icmpv6 type {
            destination-unreachable,
            packet-too-big,
            time-exceeded,
            parameter-problem,
            echo-request,
            echo-reply,
            nd-router-solicit,
            nd-router-advert,
            nd-neighbor-solicit,
            nd-neighbor-advert
        } accept

        # ICMPv4 rate limited
        ip protocol icmp icmp type {
            destination-unreachable,
            time-exceeded,
            parameter-problem,
            echo-request
        } limit rate 10/second accept

{% if bgp_peers_v4 is defined and bgp_peers_v4 | length > 0 %}
        # BGP
        tcp dport {{ bgp_port }} ip saddr @BGP_PEERS_V4 accept
{% endif %}
{% if bgp_peers_v6 is defined and bgp_peers_v6 | length > 0 %}
        tcp dport {{ bgp_port }} ip6 saddr @BGP_PEERS_V6 accept
{% endif %}

{% if bgp_peers_v4 is defined and bgp_peers_v4 | length > 0 %}
        # BFD
        udp dport { {{ bfd_ports | join(', ') }} } ip saddr @BGP_PEERS_V4 accept
{% endif %}
{% if bgp_peers_v6 is defined and bgp_peers_v6 | length > 0 %}
        udp dport { {{ bfd_ports | join(', ') }} } ip6 saddr @BGP_PEERS_V6 accept
{% endif %}

        # OSPF
        ip protocol ospf accept
        ip6 nexthdr ospf accept

        # SSH rate limited
        tcp dport 22 ip6 saddr @allowed_ssh_v6 accept
        tcp dport 22 ip saddr @allowed_ssh accept

        # Proxmox services from management
        iifname $MGMT tcp dport { {{ proxmox_tcp_ports | join(', ') }} } accept
        iifname $MGMT udp dport { {{ proxmox_udp_ports | join(', ') }}, {{ proxmox_udp_ranges }} } accept

        # DNS for local networks
        iifname $INTERNAL udp dport 53 accept
        iifname $INTERNAL tcp dport 53 accept

        # Ceph from storage network
        iifname $STORAGE tcp dport { {{ ceph_tcp_ports | join(', ') }}, {{ ceph_tcp_range }} } accept

{% if nftables_enable_logging %}
        # Log drops
        limit rate {{ nftables_log_rate }} log prefix "[DROP-IN] "
{% endif %}
    }

    chain forward {
        type filter hook forward priority filter; policy drop;

        # Connection tracking
        ct state established,related accept
        ct state invalid drop

        # Allow from internal networks
        iifname $INTERNAL accept
        iifname $MGMT accept

        # Allow forwarded for NAT
        ct status dnat accept

{% if any_node_requires_firewall | default(false) %}
        # Allow to NAT forwarding network
        ip daddr {{ default_nat_network_forward_cidr }} accept
        
        # Block RFC1918 from WAN
{% for range in internal_ip_ranges %}
        oifname $WAN ip daddr {{ range }} reject
{% endfor %}
{% endif %}

        # Allow forwarding from NAT network
        ip saddr {{ default_nat_network }} accept

{% if nftables_enable_logging %}
        # Log drops
        limit rate {{ nftables_log_rate }} log prefix "[DROP-FWD] "
{% endif %}
    }

    chain output {
        type filter hook output priority filter; policy accept;
        
{% if default_need_iptables_port_forwarding %}
        # Block RFC1918 on WAN interface
{% for range in internal_ip_ranges %}
        oifname $WAN ip daddr {{ range }} reject
{% endfor %}
{% endif %}
    }
}

{% if default_need_iptables_port_forwarding %}
# NAT table - IPv4 only (IPv6 doesn't need NAT)
table ip nat {
    chain prerouting {
        type nat hook prerouting priority dstnat; policy accept;

{% if web_services is defined and web_services.ports | length > 0 %}
        # Web services
{% for port in web_services.ports %}
        tcp dport {{ port }} dnat to {{ web_services.target }}
{% endfor %}
{% endif %}

{% if ssh_containers is defined and ssh_containers | length > 0 %}
        # SSH to specific containers
{% for port, target in ssh_containers.items() %}
        tcp dport {{ port }} dnat to {{ target }}
{% endfor %}
{% endif %}

{% if all_port_forwards is defined and all_port_forwards | length > 0 %}
        # LXC node port forwards
{% for fwd in all_port_forwards %}
        iifname $WAN ip saddr != $INTERNAL4 {{ fwd.protocol }} dport {{ fwd.from_port }} dnat to {{ fwd.to_host }}
{% endfor %}
{% endif %}
    }

    chain postrouting {
        type nat hook postrouting priority srcnat; policy accept;

        # SNAT for internal networks
        ip saddr $INTERNAL4 oifname $WAN snat to $PUBLIC_IP4
        ip saddr $MGMT_NET oifname $WAN snat to $PUBLIC_IP4
    }
}

# IPv6 doesn't need NAT, but we can do NPTv6 if needed
table ip6 nat {
    # Empty for now - IPv6 uses direct routing
}
{% endif %}
