---
- name: Fetch existing NAT rules
  community.routeros.command:
    commands: /ip firewall nat print without-paging
  delegate_to: "{{ routeros_delegate_host }}"
  register: _existing_nat_rules_raw

- name: Parse existing NAT rules
  ansible.builtin.set_fact:
    existing_nat_rules: "{{ _existing_nat_rules_raw.stdout[0] | parse_nat_rules }}"
  delegate_to: "{{ routeros_delegate_host }}"

- name: Construct RouterOS commands
  ansible.builtin.set_fact:
    routeros_commands: "{{ lxc_nodes | map(attribute='port_forwards') | flatten | map('generate_routeros_command', ansible_host) | list }}"

- name: Check if port forwarding rule already exists for each port forward
  ansible.builtin.set_fact:
    port_forward_exists: "{{ existing_nat_rules | port_forward_exists(port_forward) }}"
  loop: "{{ lxc_nodes | map(attribute='port_forwards') | flatten(levels=1) }}"
  loop_control:
    loop_var: port_forward
  register: port_forwards_exist_check

- name: Configure port forwards on RouterOS for each LXC node
  community.routeros.command:
    commands: "{{ item.port_forward | generate_routeros_command(ansible_host) }}"
  loop: "{{ port_forwards_exist_check.results }}"
  when: item.ansible_facts.port_forward_exists == False
  delegate_to: "{{ routeros_delegate_host }}"
...
