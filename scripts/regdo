#!/bin/bash

# Function to check if a domain is already registered
is_domain_registered() {
    local domain=$1
    if grep -q "$domain" <<< "$existing_dns_records"; then
        return 0 # Domain is registered
    else
        return 1 # Domain is not registered
    fi
}

get_dns_record_id() {
    local hostname=$1
    echo "$existing_dns_records" | grep "$hostname" | awk -F'ID: ' '{print $2}' | awk -F', ' '{print $1}'
}

# Check if the argument is provided
if [ $# -ne 1 ]; then
    echo "Usage: $0 sshconfigname"
    exit 1
fi

ssh_details=$1
# IP address for the DNS record
ip_address="27.131.160.106"

# Fetch existing DNS records
existing_dns_records=$(porkctl dns list rotko.net)

# SSH into the host and get the list of VMs
ssh_output=$(ssh "$ssh_details" 'pct list')

# Parse the ssh_output to extract hostnames
# Adjusting the parsing logic based on your `pct list` output
hostnames=$(echo "$ssh_output" | awk '/rotko.net/{print $3}')

# Debug: Echo hostnames after they are defined
echo "Hostnames found: $hostnames"

# Loop through each hostname and register if not already done
for hostname in $hostnames; do
    if ! is_domain_registered "$hostname"; then
        # Register the domain
        porkctl dns create --name "$hostname" --type A --data "$ip_address"
        echo "Registered $hostname with IP $ip_address"
    else
        echo "$hostname is already registered."
        # Extract the record ID
        record_id=$(get_dns_record_id "$hostname")
        if [ -n "$record_id" ]; then
            # Update the existing DNS record
        #    porkctl dns update --record_id "$record_id" --name "$hostname" --type A --data "$ip_address"
        #    echo "Updated $hostname with IP $ip_address"
            echo "skip update"
        else
            echo "Failed to find DNS record ID for $hostname"
        fi
    fi
done
